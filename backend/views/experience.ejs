<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PrepNPlace - Placement Experiences</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

  <style>
    :root {
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --secondary: #f1f5f9;
      --accent: #06b6d4;
      --success: #10b981;
      --warning: #f59e0b;
      --danger: #ef4444;
      --dark: #1e293b;
      --gray: #64748b;
      --light-gray: #f8fafc;
      --border: #e2e8f0;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: var(--dark);
    }

    /* Header */
    .header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      position: sticky;
      top: 0;
      z-index: 1000;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .nav-brand {
      font-weight: 800;
      font-size: 1.5rem;
      color: var(--primary);
      text-decoration: none;
    }

    .nav-brand:hover {
      color: var(--primary-dark);
    }

    /* Hero Section */
    .hero {
      padding: 4rem 0 2rem;
      text-align: center;
      color: white;
    }

    .hero h1 {
      font-size: 3rem;
      font-weight: 800;
      margin-bottom: 1rem;
      background: linear-gradient(45deg, #fff, #e2e8f0);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .hero p {
      font-size: 1.2rem;
      opacity: 0.9;
      margin-bottom: 2rem;
    }

    .stats {
      display: flex;
      justify-content: center;
      gap: 3rem;
      margin-top: 2rem;
    }

    .stat-item {
      text-align: center;
    }

    .stat-number {
      font-size: 2rem;
      font-weight: 700;
      color: var(--accent);
    }

    .stat-label {
      font-size: 0.9rem;
      opacity: 0.8;
    }

    /* Main Content */
    .main-content {
      background: var(--light-gray);
      border-radius: 2rem 2rem 0 0;
      margin-top: 2rem;
      min-height: 80vh;
      position: relative;
    }

    /* Filters */
    .filters-section {
      background: white;
      border-radius: 1rem;
      padding: 1.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      border: 1px solid var(--border);
    }

    .search-box {
      position: relative;
      margin-bottom: 1.5rem;
    }

    .search-input {
      width: 100%;
      padding: 0.875rem 3rem 0.875rem 1rem;
      border: 2px solid var(--border);
      border-radius: 0.75rem;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: var(--light-gray);
    }

    .search-input:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
      background: white;
    }

    .search-icon {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--gray);
    }

    .filter-row {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
    }

    .filter-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .filter-label {
      font-size: 0.875rem;
      font-weight: 600;
      color: var(--gray);
    }

    .filter-select {
      padding: 0.5rem 2rem 0.5rem 0.75rem;
      border: 1px solid var(--border);
      border-radius: 0.5rem;
      background: white;
      font-size: 0.875rem;
      cursor: pointer;
      min-width: 120px;
    }

    .filter-select:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .clear-filters {
      background: none;
      border: 1px solid var(--border);
      color: var(--gray);
      padding: 0.5rem 1rem;
      border-radius: 0.5rem;
      cursor: pointer;
      font-size: 0.875rem;
      transition: all 0.3s ease;
    }

    .clear-filters:hover {
      background: var(--light-gray);
      border-color: var(--gray);
    }

    /* Experience Cards */
    .experiences-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: 1.5rem;
      padding: 2rem 0;
    }

    .experience-card {
      background: white;
      border-radius: 1rem;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      border: 1px solid var(--border);
      transition: all 0.3s ease;
      position: relative;
    }

    .experience-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .card-header {
      padding: 1.5rem 1.5rem 1rem;
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
      position: relative;
    }

    .card-header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    }

    .candidate-name {
      font-size: 1.25rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .company-info {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 0.5rem;
    }

    .company-name {
      font-weight: 600;
      font-size: 1rem;
    }

    .position-badge {
      background: rgba(255, 255, 255, 0.2);
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .card-body {
      padding: 1.5rem;
    }

    .card-meta {
      display: flex;
      gap: 1.5rem;
      margin-bottom: 1.5rem;
      font-size: 0.875rem;
      color: var(--gray);
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .meta-icon {
      color: var(--primary);
      font-size: 1rem;
    }

    .card-actions {
      display: flex;
      gap: 0.75rem;
    }

    .btn-action {
      flex: 1;
      padding: 0.75rem;
      border-radius: 0.5rem;
      font-weight: 600;
      font-size: 0.875rem;
      text-decoration: none;
      text-align: center;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .btn-read {
      background: var(--primary);
      color: white;
      border: none;
    }

    .btn-read:hover {
      background: var(--primary-dark);
      transform: translateY(-1px);
      color: white;
    }

    .btn-download {
      background: var(--success);
      color: white;
      border: none;
    }

    .btn-download:hover {
      background: #059669;
      transform: translateY(-1px);
      color: white;
    }

    .btn-info {
      background: var(--light-gray);
      color: var(--gray);
      border: 1px solid var(--border);
    }

    .btn-info:hover {
      background: var(--secondary);
      color: var(--dark);
    }

    /* No Results */
    .no-results {
      text-align: center;
      padding: 4rem 2rem;
      color: var(--gray);
    }

    .no-results-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
      opacity: 0.3;
    }

    .no-results h3 {
      margin-bottom: 0.5rem;
      color: var(--dark);
    }

    /* Floating Add Button */
    .floating-add {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      width: 56px;
      height: 56px;
      background: var(--primary);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      text-decoration: none;
      font-size: 1.5rem;
      box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
      transition: all 0.3s ease;
      z-index: 1000;
    }

    .floating-add:hover {
      background: var(--primary-dark);
      transform: scale(1.1);
      color: white;
      box-shadow: 0 6px 20px rgba(99, 102, 241, 0.6);
    }

    /* Responsive */
    @media (max-width: 768px) {
      .hero h1 {
        font-size: 2rem;
      }

      .hero p {
        font-size: 1rem;
      }

      .stats {
        gap: 1.5rem;
      }

      .stat-number {
        font-size: 1.5rem;
      }

      .filter-row {
        flex-direction: column;
        align-items: stretch;
      }

      .filter-group {
        width: 100%;
      }

      .experiences-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 1rem 0;
      }

      .card-actions {
        flex-direction: column;
      }
    }

    /* Animation */
    .experience-card {
      opacity: 0;
      transform: translateY(20px);
      animation: fadeInUp 0.6s ease forwards;
    }

    .experience-card:nth-child(even) {
      animation-delay: 0.1s;
    }

    .experience-card:nth-child(3n) {
      animation-delay: 0.2s;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
</head>

<body>
  <!-- Header -->
  <header class="header">
    <div class="container">
      <nav class="navbar navbar-expand-lg">
        <a class="nav-brand" href="/">
          <i class="fas fa-graduation-cap me-2"></i>
          PrepNPlace
        </a>
        <!-- <div class="ms-auto">
          <a href="/new" class="btn btn-outline-primary btn-sm">
            <i class="fas fa-plus me-1"></i>
            Add Experience
          </a>
        </div> -->

        <% if (userStatus) { %>
  <div class="ms-auto">
    <a href="/logout" class="btn btn-outline-primary btn-sm">
      <i class="fa-regular fa-user"></i><span> </span>
      Logout 
    </a>
  </div>
<% } else { %>
  <div class="ms-auto">
    <a href="/login" class="btn btn-outline-primary btn-sm">
      <i class="fa-regular fa-user"></i><span> </span>
      Login 
    </a>
  </div>
<% } %>

      </nav>
    </div>
  </header>

  <!-- Hero Section -->
  <section class="hero">
    <div class="container">
      <h1>Placement Experiences</h1>
      <p>Learn from real student experiences and ace your placement interviews</p>
      <div class="stats">
        <div class="stat-item">
          <div class="stat-number" id="totalExperiences">0</div>
          <div class="stat-label">Experiences</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" id="totalCompanies">0</div>
          <div class="stat-label">Companies</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">100%</div>
          <div class="stat-label">Success Stories</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <main class="main-content">
    <div class="container pt-4">
      <!-- Filters -->
      <div class="filters-section">
        <div class="search-box">
          <input type="text" class="search-input" id="searchInput" placeholder="Search by name, company, or domain...">
          <i class="fas fa-search search-icon"></i>
        </div>

        <div class="filter-row">
          <div class="filter-group">
            <label class="filter-label">Company</label>
            <select class="filter-select" id="companyFilter">
              <option value="">All Companies</option>
            </select>
          </div>

          <div class="filter-group">
            <label class="filter-label">Year</label>
            <select class="filter-select" id="yearFilter">
              <option value="">All Years</option>
            </select>
          </div>

          <div class="filter-group">
            <label class="filter-label">Type</label>
            <select class="filter-select" id="typeFilter">
              <option value="">All Types</option>
              <option value="6 Months Intern only">6 Months Intern</option>
              <option value="Intern + FTE">Intern + FTE</option>
              <option value="FTE only">FTE Only</option>
            </select>
          </div>

          <div class="filter-group">
            <label class="filter-label">Domain</label>
            <select class="filter-select" id="domainFilter">
              <option value="">All Domains</option>
            </select>
          </div>

          <button class="clear-filters" id="clearFilters">
            <i class="fas fa-times me-1"></i>
            Clear
          </button>
        </div>
      </div>

      <!-- Experiences Grid -->
      <div class="experiences-grid" id="experiencesGrid">
        <% experiences2.forEach(function(exp) { %>
          <div class="experience-card" data-company="<%= exp.company %>" data-year="<%= exp.year %>"
            data-type="<%= exp.type %>" data-domain="<%= exp.domain %>" data-name="<%= exp.name %>">
            <div class="card-header">
              <div class="candidate-name">
                <%= exp.name %>
              </div>
              <div class="company-info">
                <div class="company-name">
                  <%= exp.company %>
                </div>
                <div class="position-badge">
                  <%= exp.type %>
                </div>
              </div>
            </div>
            <div class="card-body">
              <div class="card-meta">
                <div class="meta-item">
                  <i class="fas fa-calendar-alt meta-icon"></i>
                  <span>
                    <%= exp.year %>
                  </span>
                </div>
                <div class="meta-item">
                  <i class="fas fa-code meta-icon"></i>
                  <span>
                    <%= exp.domain %>
                  </span>
                </div>
              </div>
              <div class="card-actions">
                <a href="/experience/<%= exp._id %>" class="btn-action btn-read">
                  <i class="fas fa-book-open"></i>
                  Read
                </a>

              <a href="/experience/<%= exp._id %>/download" class="btn-action btn-download">
  <i class="fas fa-download"></i>
  Download
</a>
                <!-- <a href="#" class="btn-action btn-info" onclick="showDetails('<%= exp._id %>')">
                  <i class="fas fa-info-circle"></i>
                </a> -->
              </div>
            </div>
          </div>
          <% }); %>
      </div>

      <!-- No Results -->
      <div class="no-results" id="noResults" style="display: none;">
        <div class="no-results-icon">
          <i class="fas fa-search"></i>
        </div>
        <h3>No experiences found</h3>
        <p>Try adjusting your search criteria or filters</p>
      </div>
    </div>
  </main>

  <!-- Floating Add Button -->
  <a href="/new" class="floating-add">
    <i class="fas fa-plus"></i>
  </a>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  
  <script>
    /*
    // Get all experiences data
    const experiences = Array.from(document.querySelectorAll('.experience-card')).map(card => ({
      element: card,
      company: card.dataset.company,
      year: card.dataset.year,
      type: card.dataset.type,
      domain: card.dataset.domain,
      name: card.dataset.name
    }));

    // Update stats
    const updateStats = () => {
      const totalExperiences = experiences.length;
      const uniqueCompanies = [...new Set(experiences.map(exp => exp.company))].length;

      document.getElementById('totalExperiences').textContent = totalExperiences;
      document.getElementById('totalCompanies').textContent = uniqueCompanies;
    };

    // Populate filter options
    const populateFilters = () => {
      const companies = [...new Set(experiences.map(exp => exp.company))].sort();
      const years = [...new Set(experiences.map(exp => exp.year))].sort((a, b) => b - a);
      const domains = [...new Set(experiences.map(exp => exp.domain))].sort();

      const companySelect = document.getElementById('companyFilter');
      const yearSelect = document.getElementById('yearFilter');
      const domainSelect = document.getElementById('domainFilter');

      companies.forEach(company => {
        const option = document.createElement('option');
        option.value = company;
        option.textContent = company;
        companySelect.appendChild(option);
      });

      years.forEach(year => {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearSelect.appendChild(option);
      });

      domains.forEach(domain => {
        const option = document.createElement('option');
        option.value = domain;
        option.textContent = domain;
        domainSelect.appendChild(option);
      });
    };

    // Filter experiences
    const filterExperiences = () => {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const companyFilter = document.getElementById('companyFilter').value;
      const yearFilter = document.getElementById('yearFilter').value;
      const typeFilter = document.getElementById('typeFilter').value;
      const domainFilter = document.getElementById('domainFilter').value;

      let visibleCount = 0;

      experiences.forEach(exp => {
        const matchesSearch = !searchTerm ||
          exp.name.toLowerCase().includes(searchTerm) ||
          exp.company.toLowerCase().includes(searchTerm) ||
          exp.domain.toLowerCase().includes(searchTerm);

        const matchesCompany = !companyFilter || exp.company === companyFilter;
        const matchesYear = !yearFilter || exp.year === yearFilter;
        const matchesType = !typeFilter || exp.type === typeFilter;
        const matchesDomain = !domainFilter || exp.domain === domainFilter;

        const shouldShow = matchesSearch && matchesCompany && matchesYear && matchesType && matchesDomain;

        if (shouldShow) {
          exp.element.style.display = 'block';
          visibleCount++;
        } else {
          exp.element.style.display = 'none';
        }
      });

      // Show/hide no results message
      const noResults = document.getElementById('noResults');
      if (visibleCount === 0) {
        noResults.style.display = 'block';
      } else {
        noResults.style.display = 'none';
      }
    };

    // Clear all filters
    const clearFilters = () => {
      document.getElementById('searchInput').value = '';
      document.getElementById('companyFilter').value = '';
      document.getElementById('yearFilter').value = '';
      document.getElementById('typeFilter').value = '';
      document.getElementById('domainFilter').value = '';
      filterExperiences();
    };

    // Event listeners
    document.getElementById('searchInput').addEventListener('input', filterExperiences);
    document.getElementById('companyFilter').addEventListener('change', filterExperiences);
    document.getElementById('yearFilter').addEventListener('change', filterExperiences);
    document.getElementById('typeFilter').addEventListener('change', filterExperiences);
    document.getElementById('domainFilter').addEventListener('change', filterExperiences);
    document.getElementById('clearFilters').addEventListener('click', clearFilters);

    // Show details function (placeholder)
    const showDetails = (id) => {
      // You can implement a modal or redirect to detail page
      console.log('Show details for:', id);
    };

    // Initialize
    updateStats();
    populateFilters();
    */
  </script>

  <script>
    // Get all experiences data
const experiences = Array.from(document.querySelectorAll('.experience-card')).map(card => ({
  element: card,
  company: card.dataset.company,
  year: card.dataset.year,
  type: card.dataset.type,
  domain: card.dataset.domain,
  name: card.dataset.name
}));

// Update stats
const updateStats = () => {
  const totalExperiences = experiences.length;
  const uniqueCompanies = [...new Set(experiences.map(exp => exp.company))].length;

  document.getElementById('totalExperiences').textContent = totalExperiences;
  document.getElementById('totalCompanies').textContent = uniqueCompanies;
};

// Function to normalize strings (removes extra spaces, converts to lowercase)
const normalizeString = (str) => {
  return str.trim().toLowerCase().replace(/\s+/g, ' ');
};

// Populate filter options
const populateFilters = () => {
  // Create normalized sets to avoid duplicates
  const companiesSet = new Set();
  const yearsSet = new Set();
  const domainsSet = new Set();
  
  experiences.forEach(exp => {
    companiesSet.add(exp.company.trim());
    yearsSet.add(exp.year);
    domainsSet.add(exp.domain.trim());
  });

  // Convert to sorted arrays
  const companies = Array.from(companiesSet).sort();
  const years = Array.from(yearsSet).sort((a, b) => b - a);
  const domains = Array.from(domainsSet).sort();

  const companySelect = document.getElementById('companyFilter');
  const yearSelect = document.getElementById('yearFilter');
  const domainSelect = document.getElementById('domainFilter');

  // Clear existing options (except the first "All" option)
  companySelect.innerHTML = '<option value="">All Companies</option>';
  yearSelect.innerHTML = '<option value="">All Years</option>';
  domainSelect.innerHTML = '<option value="">All Domains</option>';

  companies.forEach(company => {
    const option = document.createElement('option');
    option.value = company;
    option.textContent = company;
    companySelect.appendChild(option);
  });

  years.forEach(year => {
    const option = document.createElement('option');
    option.value = year;
    option.textContent = year;
    yearSelect.appendChild(option);
  });

  domains.forEach(domain => {
    const option = document.createElement('option');
    option.value = domain;
    option.textContent = domain;
    domainSelect.appendChild(option);
  });
};

// Filter experiences
const filterExperiences = () => {
  const searchTerm = document.getElementById('searchInput').value.toLowerCase();
  const companyFilter = document.getElementById('companyFilter').value;
  const yearFilter = document.getElementById('yearFilter').value;
  const typeFilter = document.getElementById('typeFilter').value;
  const domainFilter = document.getElementById('domainFilter').value;

  let visibleCount = 0;

  experiences.forEach(exp => {
    const matchesSearch = !searchTerm ||
      exp.name.toLowerCase().includes(searchTerm) ||
      exp.company.toLowerCase().includes(searchTerm) ||
      exp.domain.toLowerCase().includes(searchTerm);

    const matchesCompany = !companyFilter || exp.company.trim() === companyFilter;
    const matchesYear = !yearFilter || exp.year === yearFilter;
    const matchesType = !typeFilter || exp.type === typeFilter;
    const matchesDomain = !domainFilter || exp.domain.trim() === domainFilter;

    const shouldShow = matchesSearch && matchesCompany && matchesYear && matchesType && matchesDomain;

    if (shouldShow) {
      exp.element.style.display = 'block';
      visibleCount++;
    } else {
      exp.element.style.display = 'none';
    }
  });

  // Show/hide no results message
  const noResults = document.getElementById('noResults');
  if (visibleCount === 0) {
    noResults.style.display = 'block';
  } else {
    noResults.style.display = 'none';
  }
};

// Clear all filters
const clearFilters = () => {
  document.getElementById('searchInput').value = '';
  document.getElementById('companyFilter').value = '';
  document.getElementById('yearFilter').value = '';
  document.getElementById('typeFilter').value = '';
  document.getElementById('domainFilter').value = '';
  filterExperiences();
};

// Event listeners
document.getElementById('searchInput').addEventListener('input', filterExperiences);
document.getElementById('companyFilter').addEventListener('change', filterExperiences);
document.getElementById('yearFilter').addEventListener('change', filterExperiences);
document.getElementById('typeFilter').addEventListener('change', filterExperiences);
document.getElementById('domainFilter').addEventListener('change', filterExperiences);
document.getElementById('clearFilters').addEventListener('click', clearFilters);

// Show details function (placeholder)
const showDetails = (id) => {
  // You can implement a modal or redirect to detail page
  console.log('Show details for:', id);
};

// Initialize
updateStats();
populateFilters();
  </script>
</body>

</html>